<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.store.mapper.AddressMapper">
    <resultMap id="AddressEntityMap" type="com.cy.store.entity.Address">
        <id column="aid" property="aid"/>
        <result column="province_code" property="provinceCode"/>
        <result column="province_name" property="provinceName"/>
        <result column="city_code" property="cityCode"/>
        <result column="city_name" property="cityName"/>
        <result column="area_code" property="areaCode"/>
        <result column="area_name" property="areaName"/>
        <result column="is_default" property="isDefault"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!-- Insert shipping address data：Integer insert(Address address) -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="aid">
        INSERT INTO t_address (
            uid, name, province_name, province_code, city_name, city_code, area_name, area_code, zip,
            address, phone, tel, tag, is_default, created_user, created_time, modified_user, modified_time
        ) VALUES (
                     #{uid}, #{name}, #{provinceName}, #{provinceCode}, #{cityName}, #{cityCode}, #{areaName},
                     #{areaCode}, #{zip}, #{address}, #{phone}, #{tel}, #{tag}, #{isDefault}, #{createdUser},
                     #{createdTime}, #{modifiedUser}, #{modifiedTime}
                 )
    </insert>

    <!-- Collect the amount of data about a user's shipping address：Integer countByUid(Integer uid) -->
    <select id="countByUid" resultType="java.lang.Integer">
        SELECT
            COUNT(*)
        FROM
            t_address
        WHERE
            uid=#{uid}
    </select>

    <!-- Example Query the shipping address list of a user：List<Address> findByUid(Integer uid) -->
    <select id="findByUid" resultMap="AddressEntityMap">
        SELECT
            *
        FROM
            t_address
        WHERE
            uid=#{uid}
        ORDER BY
            is_default DESC, created_time DESC
    </select>

    <!-- Sets all shipping addresses for a user to non-default addresses：Integer updateNonDefaultByUid(Integer uid) -->
    <update id="updateNonDefaultByUid">
        UPDATE
            t_address
        SET
            is_default=0
        WHERE
            uid=#{uid}
    </update>

    <!-- Sets the specified shipping address to the default address：
         Integer updateDefaultByAid(
            @Param("aid") Integer aid,
            @Param("modifiedUser") String modifiedUser,
            @Param("modifiedTime") Date modifiedTime) -->
    <update id="updateDefaultByAid">
        UPDATE
            t_address
        SET
            is_default=1,
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        WHERE
            aid=#{aid}
    </update>

    <!-- Query the receiving address details according to the receiving address AID value：Address findByAid(Integer aid) -->
    <select id="findByAid" resultMap="AddressEntityMap">
        SELECT
            *
        FROM
            t_address
        WHERE
            aid=#{aid}
    </select>

    <!-- Delete data based on the shipping address ID：Integer deleteByAid(Integer aid) -->
    <delete id="deleteByAid">
        DELETE FROM
            t_address
        WHERE
            aid=#{aid}
    </delete>

    <!-- Query the last modified shipping address of a user：Address findLastModified(Integer uid) -->
    <select id="findLastModified" resultMap="AddressEntityMap">
        SELECT
            *
        FROM
            t_address
        WHERE
            uid=#{uid}
        ORDER BY
            modified_time DESC
            LIMIT 0,1
    </select>

</mapper>
